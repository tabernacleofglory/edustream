rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function hasPermission(permission) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in get(/databases/$(database)/documents/rolePermissions/$(permission)).data.permissions;
    }
    
    function isDeveloper() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'developer';
    }

    match /users/{userId} {
      allow get: if request.auth != null;
      allow list: if hasPermission('manageUsers');
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId) || hasPermission('manageUsers');
      allow delete: if hasPermission('manageUsers');
    }

    match /courses/{courseId} {
      allow read: if request.auth != null;
      allow create, update, delete: if hasPermission('manageCourses');
    }

    match /enrollments/{enrollmentId} {
      allow read, create, delete: if request.auth != null && enrollmentId.split('_')[0] == request.auth.uid;
      allow list: if hasPermission('viewAnalytics');
    }

    match /userVideoProgress/{progressId} {
      allow read, write: if request.auth != null && progressId.split('_')[0] == request.auth.uid;
      allow list: if hasPermission('viewAnalytics');
    }
    
    match /Contents/{contentId} {
      allow read: if request.auth != null;
      allow create, update, delete: if hasPermission('manageContent');
      
      match /comments/{commentId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        allow update: if request.auth != null && request.resource.data.userId == request.auth.uid;
        allow delete: if hasPermission('manageCommunity') || (request.auth != null && resource.data.userId == request.auth.uid);
      }

      match /likes/{likeId} {
        allow read: if request.auth != null;
        allow create, delete: if request.auth != null && likeId == request.auth.uid;
      }
      
      match /shares/{shareId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
      }
    }
    
    match /communityPosts/{postId} {
        allow read: if hasPermission('viewCommunityPage');
        allow create: if request.auth != null;
        allow update: if (request.auth.uid == resource.data.authorId) || hasPermission('manageCommunity');
        allow delete: if (request.auth.uid == resource.data.authorId) || hasPermission('manageCommunity');

        match /replies/{replyId} {
            allow read: if hasPermission('viewCommunityPage');
            allow create: if request.auth != null;
            allow update: if request.auth.uid == resource.data.authorId;
            allow delete: if (request.auth.uid == resource.data.authorId) || hasPermission('manageCommunity');
        }
    }
    
    match /courseCategories/{categoryId} {
        allow read: if request.auth != null;
        allow create, delete: if hasPermission('manageCourses');
    }
    
    match /courseLevels/{levelId} {
        allow read: if request.auth != null;
        allow create, update, delete: if hasPermission('manageUsers');
    }
    
    match /speakers/{speakerId} {
      allow read: if request.auth != null;
      allow create, update, delete: if hasPermission('manageContent');
    }

    match /navLinks/{linkId} {
      allow read: if request.auth != null;
      allow create, update, delete: if hasPermission('manageLinks');
    }
    
    match /siteSettings/main {
      allow read: if true;
      allow write: if hasPermission('developer');
    }
    
    match /certificates/{certId} {
        allow read: if request.auth != null;
        allow create, update, delete: if hasPermission('manageContent');
    }
    
     match /Campus/{campusId} {
        allow read: if request.auth != null;
        allow create, update, delete: if hasPermission('manageCampus');
    }
    
    match /liveEvents/{eventId} {
        allow read: if hasPermission('viewLivePage');
        allow create, update, delete: if hasPermission('manageLive');
    }
    
    match /documentation/{docId} {
        allow read: if hasPermission('viewDocumentationPage');
        allow create, update, delete: if hasPermission('manageContent');
    }
    
    match /promotionRequests/{requestId} {
        allow read: if hasPermission('managePromotions') || isOwner(resource.data.userId);
        allow create: if request.auth != null;
        allow update: if hasPermission('managePromotions');
    }

    match /rolePermissions/{roleId} {
        allow read: if request.auth != null;
        allow write: if isDeveloper();
    }

    // Dynamic collections for user metadata, accessible only to the user or admins
    match /users/{userId}/{collection}/{docId} {
      allow read, write: if isOwner(userId) || hasPermission('manageUsers');
    }
  }
}
